{"all": "'all'\n     Compile the entire program.  This should be the default target.\n     This target need not rebuild any documentation files; Info files\n     should normally be included in the distribution, and DVI (and other\n     documentation format) files should be made only when explicitly\n     asked for.\n     By default, the Make rules should compile and link with '-g', so\n     that executable programs have debugging symbols.  Otherwise, you\n     are essentially helpless in the face of a crash, and it is often\n     far from easy to reproduce with a fresh build.", "clean": "'clean'\n     Delete all files in the current directory that are normally created\n     by building the program.  Also delete files in other directories if\n     they are created by this makefile.  However, don't delete the files\n     that record the configuration.  Also preserve files that could be\n     made by building, but normally aren't because the distribution\n     comes with them.  There is no need to delete parent directories\n     that were created with 'mkdir -p', since they could have existed\n     anyway.\n     Delete '.dvi' files here if they are not part of the distribution.", "mostlyclean": "'mostlyclean'\n     Like 'clean', but may refrain from deleting a few files that people\n     normally don't want to recompile.  For example, the 'mostlyclean'\n     target for GCC does not delete 'libgcc.a', because recompiling it\n     is rarely necessary and takes a lot of time.", "distclean": "'distclean'\n     Delete all files in the current directory (or created by this\n     makefile) that are created by configuring or building the program.\n     If you have unpacked the source and built the program without\n     creating any other files, 'make distclean' should leave only the\n     files that were in the distribution.  However, there is no need to\n     delete parent directories that were created with 'mkdir -p', since\n     they could have existed anyway.", "realclean": "'distclean'\n'realclean'\n'clobber'\n     Any of these targets might be defined to delete _more_ files than\n     'clean' does.  For example, this would delete configuration files\n     or links that you would normally create as preparation for\n     compilation, even if the makefile itself cannot create these files.", "clobber": "'distclean'\n'realclean'\n'clobber'\n     Any of these targets might be defined to delete _more_ files than\n     'clean' does.  For example, this would delete configuration files\n     or links that you would normally create as preparation for\n     compilation, even if the makefile itself cannot create these files.", "install": "'install'\n     Compile the program and copy the executables, libraries, and so on\n     to the file names where they should reside for actual use.  If\n     there is a simple test to verify that a program is properly\n     installed, this target should run that test.\n     Do not strip executables when installing them.  This helps eventual\n     debugging that may be needed later, and nowadays disk space is\n     cheap and dynamic loaders typically ensure debug sections are not\n     loaded during normal execution.  Users that need stripped binaries\n     may invoke the 'install-strip' target to do that.\n     If possible, write the 'install' target rule so that it does not\n     modify anything in the directory where the program was built,\n     provided 'make all' has just been done.  This is convenient for\n     building the program under one user name and installing it under\n     another.\n     The commands should create all the directories in which files are\n     to be installed, if they don't already exist.  This includes the\n     directories specified as the values of the variables 'prefix' and\n     'exec_prefix', as well as all subdirectories that are needed.  One\n     way to do this is by means of an 'installdirs' target as described\n     below.\n     Use '-' before any command for installing a man page, so that\n     'make' will ignore any errors.  This is in case there are systems\n     that don't have the Unix man page documentation system installed.\n     The way to install Info files is to copy them into '$(infodir)'\n     with '$(INSTALL_DATA)' (*note Command Variables::), and then run\n     the 'install-info' program if it is present.  'install-info' is a\n     program that edits the Info 'dir' file to add or update the menu\n     entry for the given Info file; it is part of the Texinfo package.\n     Here is a sample rule to install an Info file that also tries to\n     handle some additional situations, such as 'install-info' not being\n     present.\n          do-install-info: foo.info installdirs\n                  $(NORMAL_INSTALL)\n          # Prefer an info file in . to one in srcdir.\n                  if test -f foo.info; then d=.; \\\n                   else d=\"$(srcdir)\"; fi; \\\n                  $(INSTALL_DATA) $$d/foo.info \\\n                    \"$(DESTDIR)$(infodir)/foo.info\"\n          # Run install-info only if it exists.\n          # Use 'if' instead of just prepending '-' to the\n          # line so we notice real errors from install-info.\n          # Use '$(SHELL) -c' because some shells do not\n          # fail gracefully when there is an unknown command.\n                  $(POST_INSTALL)\n                  if $(SHELL) -c 'install-info --version' \\\n                     >/dev/null 2>&1; then \\\n                    install-info --dir-file=\"$(DESTDIR)$(infodir)/dir\" \\\n                                 \"$(DESTDIR)$(infodir)/foo.info\"; \\\n                  else true; fi\n     When writing the 'install' target, you must classify all the\n     commands into three categories: normal ones, \"pre-installation\"\n     commands and \"post-installation\" commands.  *Note Install Command\n     Categories::.", "print": "'print'\n     Print listings of the source files that have changed.", "tar": "'tar'\n     Create a tar file of the source files.", "shar": "'shar'\n     Create a shell archive (shar file) of the source files.", "dist": "'dist'\n     Create a distribution tar file for this program.  The tar file\n     should be set up so that the file names in the tar file start with\n     a subdirectory name which is the name of the package it is a\n     distribution for.  This name can include the version number.\n     For example, the distribution tar file of GCC version 1.40 unpacks\n     into a subdirectory named 'gcc-1.40'.\n     The easiest way to do this is to create a subdirectory\n     appropriately named, use 'ln' or 'cp' to install the proper files\n     in it, and then 'tar' that subdirectory.\n     Compress the tar file with 'gzip'.  For example, the actual\n     distribution file for GCC version 1.40 is called 'gcc-1.40.tar.gz'.\n     It is ok to support other free compression formats as well.\n     The 'dist' target should explicitly depend on all non-source files\n     that are in the distribution, to make sure they are up to date in\n     the distribution.  *Note Making Releases: (standards)Releases.", "TAGS": "'TAGS'\n     Update a tags table for this program.", "check": "'check'\n     Perform self-tests (if any).  The user must build the program\n     before running the tests, but need not install the program; you\n     should write the self-tests so that they work when the program is\n     built but not installed.", "test": "'check'\n'test'\n     Perform self tests on the program this makefile builds.", "AR": "'AR'\n     Archive-maintaining program; default 'ar'.", "AS": "'AS'\n     Program for compiling assembly files; default 'as'.", "CC": "'CC'\n     Program for compiling C programs; default 'cc'.", "CXX": "'CXX'\n     Program for compiling C++ programs; default 'g++'.", "CPP": "'CPP'\n     Program for running the C preprocessor, with results to standard\n     output; default '$(CC) -E'.", "FC": "'FC'\n     Program for compiling or preprocessing Fortran and Ratfor programs;\n     default 'f77'.", "M2C": "'M2C'\n     Program to use to compile Modula-2 source code; default 'm2c'.", "PC": "'PC'\n     Program for compiling Pascal programs; default 'pc'.", "CO": "'CO'\n     Program for extracting a file from RCS; default 'co'.", "GET": "'GET'\n     Program for extracting a file from SCCS; default 'get'.", "LEX": "'LEX'\n     Program to use to turn Lex grammars into source code; default\n     'lex'.", "YACC": "'YACC'\n     Program to use to turn Yacc grammars into source code; default\n     'yacc'.", "LINT": "'LINT'\n     Program to use to run lint on source code; default 'lint'.", "MAKEINFO": "'MAKEINFO'\n     Program to convert a Texinfo source file into an Info file; default\n     'makeinfo'.", "TEX": "'TEX'\n     Program to make TeX DVI files from TeX source; default 'tex'.", "TEXI2DVI": "'TEXI2DVI'\n     Program to make TeX DVI files from Texinfo source; default\n     'texi2dvi'.", "WEAVE": "'WEAVE'\n     Program to translate Web into TeX; default 'weave'.", "CWEAVE": "'CWEAVE'\n     Program to translate C Web into TeX; default 'cweave'.", "TANGLE": "'TANGLE'\n     Program to translate Web into Pascal; default 'tangle'.", "CTANGLE": "'CTANGLE'\n     Program to translate C Web into C; default 'ctangle'.", "RM": "'RM'\n     Command to remove a file; default 'rm -f'.", "ARFLAGS": "'ARFLAGS'\n     Flags to give the archive-maintaining program; default 'rv'.", "ASFLAGS": "'ASFLAGS'\n     Extra flags to give to the assembler (when explicitly invoked on a\n     '.s' or '.S' file).", "CFLAGS": "'CFLAGS'\n     Extra flags to give to the C compiler.", "CXXFLAGS": "'CXXFLAGS'\n     Extra flags to give to the C++ compiler.", "COFLAGS": "'COFLAGS'\n     Extra flags to give to the RCS 'co' program.", "CPPFLAGS": "'CPPFLAGS'\n     Extra flags to give to the C preprocessor and programs that use it\n     (the C and Fortran compilers).", "FFLAGS": "'FFLAGS'\n     Extra flags to give to the Fortran compiler.", "GFLAGS": "'GFLAGS'\n     Extra flags to give to the SCCS 'get' program.", "LDFLAGS": "'LDFLAGS'\n     Extra flags to give to compilers when they are supposed to invoke\n     the linker, 'ld', such as '-L'.  Libraries ('-lfoo') should be\n     added to the 'LDLIBS' variable instead.", "LDLIBS": "'LDLIBS'\n     Library flags or names given to compilers when they are supposed to\n     invoke the linker, 'ld'.  'LOADLIBES' is a deprecated (but still\n     supported) alternative to 'LDLIBS'.  Non-library linker flags, such\n     as '-L', should go in the 'LDFLAGS' variable.", "LFLAGS": "'LFLAGS'\n     Extra flags to give to Lex.", "YFLAGS": "'YFLAGS'\n     Extra flags to give to Yacc.", "PFLAGS": "'PFLAGS'\n     Extra flags to give to the Pascal compiler.", "RFLAGS": "'RFLAGS'\n     Extra flags to give to the Fortran compiler for Ratfor programs.", "LINTFLAGS": "'LINTFLAGS'\n     Extra flags to give to lint.", "parse.tab.h',": "'parse.tab.h', when 'parse.y' is changed, the recipe 'bison -d parse.y'", "@": "'$@'\n     The file name of the target.", "%": "'$%'\n     The target member name, when the target is an archive member.", "<": "'$<'\n     The name of the first prerequisite.", "?": "'$?'\n     The names of all the prerequisites that are newer than the target,\n     with spaces between them.  For prerequisites which are archive\n     members, only the named member is used (*note Archives::).", "^": "'$^'\n'$+'\n     The names of all the prerequisites, with spaces between them.  For\n     prerequisites which are archive members, only the named member is\n     used (*note Archives::).  The value of '$^' omits duplicate\n     prerequisites, while '$+' retains them and preserves their order.", "+": "'$^'\n'$+'\n     The names of all the prerequisites, with spaces between them.  For\n     prerequisites which are archive members, only the named member is\n     used (*note Archives::).  The value of '$^' omits duplicate\n     prerequisites, while '$+' retains them and preserves their order.", "|": "'$|'\n     The names of all the order-only prerequisites, with spaces between\n     them.", "*": "'$*'\n     The stem with which an implicit rule matches (*note How Patterns\n     Match: Pattern Match.).", "@D": "'$(@D)'\n'$(@F)'\n     The directory part and the file-within-directory part of '$@'.", "@F": "'$(@D)'\n'$(@F)'\n     The directory part and the file-within-directory part of '$@'.", "*D": "'$(*D)'\n'$(*F)'\n     The directory part and the file-within-directory part of '$*'.", "*F": "'$(*D)'\n'$(*F)'\n     The directory part and the file-within-directory part of '$*'.", "%D": "'$(%D)'\n'$(%F)'\n     The directory part and the file-within-directory part of '$%'.", "%F": "'$(%D)'\n'$(%F)'\n     The directory part and the file-within-directory part of '$%'.", "<D": "'$(<D)'\n'$(<F)'\n     The directory part and the file-within-directory part of '$<'.", "<F": "'$(<D)'\n'$(<F)'\n     The directory part and the file-within-directory part of '$<'.", "^D": "'$(^D)'\n'$(^F)'\n     The directory part and the file-within-directory part of '$^'.", "^F": "'$(^D)'\n'$(^F)'\n     The directory part and the file-within-directory part of '$^'.", "+D": "'$(+D)'\n'$(+F)'\n     The directory part and the file-within-directory part of '$+'.", "+F": "'$(+D)'\n'$(+F)'\n     The directory part and the file-within-directory part of '$+'.", "?D": "'$(?D)'\n'$(?F)'\n     The directory part and the file-within-directory part of '$?'.", "?F": "'$(?D)'\n'$(?F)'\n     The directory part and the file-within-directory part of '$?'.", "bar.f'": "'bar.f' exist, 'make' will choose the first rule and compile 'bar.c'", "#f": "'#f'\n     False is converted into the empty string: in 'make' conditionals\n     the empty string is considered false.", "#t": "'#t'\n     True is converted to the string '#t': in 'make' conditionals any\n     non-empty string is considered true.", "symbol": "'symbol'\n'number'\n     A symbol or number is converted into the string representation of\n     that symbol or number.", "number": "'symbol'\n'number'\n     A symbol or number is converted into the string representation of\n     that symbol or number.", "character": "'character'\n     A printable character is converted to the same character.", "string": "'string'\n     A string containing only printable characters is converted to the\n     same string.", "list": "'list'\n     A list is converted recursively according to the above rules.  This\n     implies that any structured list will be flattened (that is, a\n     result of ''(a b (c d) e)' will be converted to the 'make' string\n     'a b c d e').", "other": "'other'\n     Any other Guile type results in an error.  In future versions of\n     'make', other Guile types may be converted.", "gmk-expand": "'gmk-expand'\n     This procedure takes a single argument which is converted into a\n     string.  The string is expanded by 'make' using normal 'make'\n     expansion rules.  The result of the expansion is converted into a\n     Guile string and provided as the result of the procedure.", "gmk-eval": "'gmk-eval'\n     This procedure takes a single argument which is converted into a\n     string.  The string is evaluated by 'make' as if it were a\n     makefile.  This is the same capability available via the 'eval'\n     function (*note Eval Function::).  The result of the 'gmk-eval'\n     procedure is always the empty string.\n     Note that 'gmk-eval' is not quite the same as using 'gmk-expand'\n     with the 'eval' function: in the latter case the evaluated string\n     will be expanded _twice_; first by 'gmk-expand', then again by the\n     'eval' function.", "gmk_floc": "'gmk_floc'\n     This structure represents a filename/location pair.  It is provided\n     when defining items, so GNU 'make' can inform the user later where\n     the definition occurred if necessary.", "name": "'name'\n     The function name.  This is what the makefile should use to invoke\n     the function.  The name must be between 1 and 255 characters long\n     and it may only contain alphanumeric, period ('.'), dash ('-'), and\n     underscore ('_') characters.  It may not begin with a period.", "func_ptr": "'func_ptr'\n     A pointer to a function that 'make' will invoke when it expands the\n     function in a makefile.  This function must be defined by the\n     loaded object.", "min_args": "'min_args'\n     The minimum number of arguments the function will accept.  Must be\n     between 0 and 255.  GNU 'make' will check this and fail before\n     invoking 'func_ptr' if the function was invoked with too few\n     arguments.", "max_args": "'max_args'\n     The maximum number of arguments the function will accept.  Must be\n     between 0 and 255.  GNU 'make' will check this and fail before\n     invoking 'func_ptr' if the function was invoked with too many\n     arguments.  If the value is 0, then any number of arguments is\n     accepted.  If the value is greater than 0, then it must be greater\n     than or equal to 'min_args'.", "flags": "'flags'\n     Flags that specify how this function will operate; the desired\n     flags should be OR'd together.  If the 'GMK_FUNC_NOEXPAND' flag is\n     given then the function arguments will not be expanded before the\n     function is called; otherwise they will be expanded first.", "gmk_expand": "'gmk_expand'\n     This function takes a string and expands it using 'make' expansion\n     rules.  The result of the expansion is returned in a nil-terminated\n     string buffer.  The caller is responsible for calling 'gmk_free'\n     with a pointer to the returned buffer when done.", "gmk_eval": "'gmk_eval'\n     This function takes a buffer and evaluates it as a segment of\n     makefile syntax.  This function can be used to define new\n     variables, new rules, etc.  It is equivalent to using the 'eval'\n     'make' function.", "gmk_alloc": "'gmk_alloc'\n     Return a pointer to a newly-allocated buffer.  This function will\n     always return a valid pointer; if not enough memory is available\n     'make' will exit.  'gmk_alloc' does not initialize allocated\n     memory.", "gmk_free": "'gmk_free'\n     Free a buffer returned to you by 'make'.  Once the 'gmk_free'\n     function returns the string will no longer be valid.  If NULL is\n     passed to 'gmk_free', no operation is performed.", "DESTDIR'": "'DESTDIR' should be supported only in the 'install*' and 'uninstall*'", "prefix": "'prefix'\n     A prefix used in constructing the default values of the variables\n     listed below.  The default value of 'prefix' should be\n     '/usr/local'.  When building the complete GNU system, the prefix\n     will be empty and '/usr' will be a symbolic link to '/'.  (If you\n     are using Autoconf, write it as '@prefix@'.)\n     Running 'make install' with a different value of 'prefix' from the\n     one used to build the program should _not_ recompile the program.", "exec_prefix": "'exec_prefix'\n     A prefix used in constructing the default values of some of the\n     variables listed below.  The default value of 'exec_prefix' should\n     be '$(prefix)'.  (If you are using Autoconf, write it as\n     '@exec_prefix@'.)\n     Generally, '$(exec_prefix)' is used for directories that contain\n     machine-specific files (such as executables and subroutine\n     libraries), while '$(prefix)' is used directly for other\n     directories.\n     Running 'make install' with a different value of 'exec_prefix' from\n     the one used to build the program should _not_ recompile the\n     program.", "bindir": "'bindir'\n     The directory for installing executable programs that users can\n     run.  This should normally be '/usr/local/bin', but write it as\n     '$(exec_prefix)/bin'.  (If you are using Autoconf, write it as\n     '@bindir@'.)", "sbindir": "'sbindir'\n     The directory for installing executable programs that can be run\n     from the shell, but are only generally useful to system\n     administrators.  This should normally be '/usr/local/sbin', but\n     write it as '$(exec_prefix)/sbin'.  (If you are using Autoconf,\n     write it as '@sbindir@'.)", "libexecdir": "'libexecdir'\n     The directory for installing executable programs to be run by other\n     programs rather than by users.  This directory should normally be\n     '/usr/local/libexec', but write it as '$(exec_prefix)/libexec'.\n     (If you are using Autoconf, write it as '@libexecdir@'.)\n     The definition of 'libexecdir' is the same for all packages, so you\n     should install your data in a subdirectory thereof.  Most packages\n     install their data under '$(libexecdir)/PACKAGE-NAME/', possibly\n     within additional subdirectories thereof, such as\n     '$(libexecdir)/PACKAGE-NAME/MACHINE/VERSION'.", "datarootdir": "'datarootdir'\n     The root of the directory tree for read-only\n     architecture-independent data files.  This should normally be\n     '/usr/local/share', but write it as '$(prefix)/share'.  (If you are\n     using Autoconf, write it as '@datarootdir@'.)  'datadir''s default\n     value is based on this variable; so are 'infodir', 'mandir', and\n     others.", "datadir": "'datadir'\n     The directory for installing idiosyncratic read-only\n     architecture-independent data files for this program.  This is\n     usually the same place as 'datarootdir', but we use the two\n     separate variables so that you can move these program-specific\n     files without altering the location for Info files, man pages, etc.\n     This should normally be '/usr/local/share', but write it as\n     '$(datarootdir)'.  (If you are using Autoconf, write it as\n     '@datadir@'.)\n     The definition of 'datadir' is the same for all packages, so you\n     should install your data in a subdirectory thereof.  Most packages\n     install their data under '$(datadir)/PACKAGE-NAME/'.", "sysconfdir": "'sysconfdir'\n     The directory for installing read-only data files that pertain to a\n     single machine-that is to say, files for configuring a host.\n     Mailer and network configuration files, '/etc/passwd', and so forth\n     belong here.  All the files in this directory should be ordinary\n     ASCII text files.  This directory should normally be\n     '/usr/local/etc', but write it as '$(prefix)/etc'.  (If you are\n     using Autoconf, write it as '@sysconfdir@'.)\n     Do not install executables here in this directory (they probably\n     belong in '$(libexecdir)' or '$(sbindir)').  Also do not install\n     files that are modified in the normal course of their use (programs\n     whose purpose is to change the configuration of the system\n     excluded).  Those probably belong in '$(localstatedir)'.", "sharedstatedir": "'sharedstatedir'\n     The directory for installing architecture-independent data files\n     which the programs modify while they run.  This should normally be\n     '/usr/local/com', but write it as '$(prefix)/com'.  (If you are\n     using Autoconf, write it as '@sharedstatedir@'.)", "localstatedir": "'localstatedir'\n     The directory for installing data files which the programs modify\n     while they run, and that pertain to one specific machine.  Users\n     should never need to modify files in this directory to configure\n     the package's operation; put such configuration information in\n     separate files that go in '$(datadir)' or '$(sysconfdir)'.\n     '$(localstatedir)' should normally be '/usr/local/var', but write\n     it as '$(prefix)/var'.  (If you are using Autoconf, write it as\n     '@localstatedir@'.)", "runstatedir": "'runstatedir'\n     The directory for installing data files which the programs modify\n     while they run, that pertain to one specific machine, and which\n     need not persist longer than the execution of the program--which is\n     generally long-lived, for example, until the next reboot.  PID\n     files for system daemons are a typical use.  In addition, this\n     directory should not be cleaned except perhaps at reboot, while the\n     general '/tmp' ('TMPDIR') may be cleaned arbitrarily.  This should\n     normally be '/var/run', but write it as '$(localstatedir)/run'.\n     Having it as a separate variable allows the use of '/run' if\n     desired, for example.  (If you are using Autoconf 2.70 or later,\n     write it as '@runstatedir@'.)", "includedir": "'includedir'\n     The directory for installing header files to be included by user\n     programs with the C '#include' preprocessor directive.  This should\n     normally be '/usr/local/include', but write it as\n     '$(prefix)/include'.  (If you are using Autoconf, write it as\n     '@includedir@'.)\n     Most compilers other than GCC do not look for header files in\n     directory '/usr/local/include'.  So installing the header files\n     this way is only useful with GCC.  Sometimes this is not a problem\n     because some libraries are only really intended to work with GCC.\n     But some libraries are intended to work with other compilers.  They\n     should install their header files in two places, one specified by\n     'includedir' and one specified by 'oldincludedir'.", "oldincludedir": "'oldincludedir'\n     The directory for installing '#include' header files for use with\n     compilers other than GCC.  This should normally be '/usr/include'.\n     (If you are using Autoconf, you can write it as '@oldincludedir@'.)\n     The Makefile commands should check whether the value of\n     'oldincludedir' is empty.  If it is, they should not try to use it;\n     they should cancel the second installation of the header files.\n     A package should not replace an existing header in this directory\n     unless the header came from the same package.  Thus, if your Foo\n     package provides a header file 'foo.h', then it should install the\n     header file in the 'oldincludedir' directory if either (1) there is\n     no 'foo.h' there or (2) the 'foo.h' that exists came from the Foo\n     package.\n     To tell whether 'foo.h' came from the Foo package, put a magic\n     string in the file--part of a comment--and 'grep' for that string.", "docdir": "'docdir'\n     The directory for installing documentation files (other than Info)\n     for this package.  By default, it should be\n     '/usr/local/share/doc/YOURPKG', but it should be written as\n     '$(datarootdir)/doc/YOURPKG'.  (If you are using Autoconf, write it\n     as '@docdir@'.)  The YOURPKG subdirectory, which may include a\n     version number, prevents collisions among files with common names,\n     such as 'README'.", "infodir": "'infodir'\n     The directory for installing the Info files for this package.  By\n     default, it should be '/usr/local/share/info', but it should be\n     written as '$(datarootdir)/info'.  (If you are using Autoconf,\n     write it as '@infodir@'.)  'infodir' is separate from 'docdir' for\n     compatibility with existing practice.", "htmldir": "'htmldir'\n'dvidir'\n'pdfdir'\n'psdir'\n     Directories for installing documentation files in the particular\n     format.  They should all be set to '$(docdir)' by default.  (If you\n     are using Autoconf, write them as '@htmldir@', '@dvidir@', etc.)\n     Packages which supply several translations of their documentation\n     should install them in '$(htmldir)/'LL, '$(pdfdir)/'LL, etc.  where\n     LL is a locale abbreviation such as 'en' or 'pt_BR'.", "dvidir": "'htmldir'\n'dvidir'\n'pdfdir'\n'psdir'\n     Directories for installing documentation files in the particular\n     format.  They should all be set to '$(docdir)' by default.  (If you\n     are using Autoconf, write them as '@htmldir@', '@dvidir@', etc.)\n     Packages which supply several translations of their documentation\n     should install them in '$(htmldir)/'LL, '$(pdfdir)/'LL, etc.  where\n     LL is a locale abbreviation such as 'en' or 'pt_BR'.", "pdfdir": "'htmldir'\n'dvidir'\n'pdfdir'\n'psdir'\n     Directories for installing documentation files in the particular\n     format.  They should all be set to '$(docdir)' by default.  (If you\n     are using Autoconf, write them as '@htmldir@', '@dvidir@', etc.)\n     Packages which supply several translations of their documentation\n     should install them in '$(htmldir)/'LL, '$(pdfdir)/'LL, etc.  where\n     LL is a locale abbreviation such as 'en' or 'pt_BR'.", "psdir": "'htmldir'\n'dvidir'\n'pdfdir'\n'psdir'\n     Directories for installing documentation files in the particular\n     format.  They should all be set to '$(docdir)' by default.  (If you\n     are using Autoconf, write them as '@htmldir@', '@dvidir@', etc.)\n     Packages which supply several translations of their documentation\n     should install them in '$(htmldir)/'LL, '$(pdfdir)/'LL, etc.  where\n     LL is a locale abbreviation such as 'en' or 'pt_BR'.", "libdir": "'libdir'\n     The directory for object files and libraries of object code.  Do\n     not install executables here, they probably ought to go in\n     '$(libexecdir)' instead.  The value of 'libdir' should normally be\n     '/usr/local/lib', but write it as '$(exec_prefix)/lib'.  (If you\n     are using Autoconf, write it as '@libdir@'.)", "lispdir": "'lispdir'\n     The directory for installing any Emacs Lisp files in this package.\n     By default, it should be '/usr/local/share/emacs/site-lisp', but it\n     should be written as '$(datarootdir)/emacs/site-lisp'.\n     If you are using Autoconf, write the default as '@lispdir@'.  In\n     order to make '@lispdir@' work, you need the following lines in\n     your 'configure.ac' file:\n          lispdir='${datarootdir}/emacs/site-lisp'\n          AC_SUBST(lispdir)", "localedir": "'localedir'\n     The directory for installing locale-specific message catalogs for\n     this package.  By default, it should be '/usr/local/share/locale',\n     but it should be written as '$(datarootdir)/locale'.  (If you are\n     using Autoconf, write it as '@localedir@'.)  This directory usually\n     has a subdirectory per locale.", "mandir": "'mandir'\n     The top-level directory for installing the man pages (if any) for\n     this package.  It will normally be '/usr/local/share/man', but you\n     should write it as '$(datarootdir)/man'.  (If you are using\n     Autoconf, write it as '@mandir@'.)", "man1dir": "'man1dir'\n     The directory for installing section 1 man pages.  Write it as\n     '$(mandir)/man1'.", "man2dir": "'man2dir'\n     The directory for installing section 2 man pages.  Write it as\n     '$(mandir)/man2'", "...": "'...'\n     Use these names instead of 'manext' if the package needs to install\n     man pages in more than one section of the manual.", "manext": "'manext'\n     The file name extension for the installed man page.  This should\n     contain a period followed by the appropriate digit; it should\n     normally be '.1'.", "man1ext": "'man1ext'\n     The file name extension for installed section 1 man pages.", "man2ext": "'man2ext'\n     The file name extension for installed section 2 man pages.", "srcdir": "'srcdir'\n     The directory for the sources being compiled.  The value of this\n     variable is normally inserted by the 'configure' shell script.  (If\n     you are using Autoconf, use 'srcdir = @srcdir@'.)", "install-html": "'install-html'\n'install-dvi'\n'install-pdf'\n'install-ps'\n     These targets install documentation in formats other than Info;\n     they're intended to be called explicitly by the person installing\n     the package, if that format is desired.  GNU prefers Info files, so\n     these must be installed by the 'install' target.\n     When you have many documentation files to install, we recommend\n     that you avoid collisions and clutter by arranging for these\n     targets to install in subdirectories of the appropriate\n     installation directory, such as 'htmldir'.  As one example, if your\n     package has multiple manuals, and you wish to install HTML\n     documentation with many files (such as the \"split\" mode output by\n     'makeinfo --html'), you'll certainly want to use subdirectories, or\n     two nodes with the same name in different manuals will overwrite\n     each other.\n     Please make these 'install-FORMAT' targets invoke the commands for\n     the FORMAT target, for example, by making FORMAT a dependency.", "install-dvi": "'install-html'\n'install-dvi'\n'install-pdf'\n'install-ps'\n     These targets install documentation in formats other than Info;\n     they're intended to be called explicitly by the person installing\n     the package, if that format is desired.  GNU prefers Info files, so\n     these must be installed by the 'install' target.\n     When you have many documentation files to install, we recommend\n     that you avoid collisions and clutter by arranging for these\n     targets to install in subdirectories of the appropriate\n     installation directory, such as 'htmldir'.  As one example, if your\n     package has multiple manuals, and you wish to install HTML\n     documentation with many files (such as the \"split\" mode output by\n     'makeinfo --html'), you'll certainly want to use subdirectories, or\n     two nodes with the same name in different manuals will overwrite\n     each other.\n     Please make these 'install-FORMAT' targets invoke the commands for\n     the FORMAT target, for example, by making FORMAT a dependency.", "install-pdf": "'install-html'\n'install-dvi'\n'install-pdf'\n'install-ps'\n     These targets install documentation in formats other than Info;\n     they're intended to be called explicitly by the person installing\n     the package, if that format is desired.  GNU prefers Info files, so\n     these must be installed by the 'install' target.\n     When you have many documentation files to install, we recommend\n     that you avoid collisions and clutter by arranging for these\n     targets to install in subdirectories of the appropriate\n     installation directory, such as 'htmldir'.  As one example, if your\n     package has multiple manuals, and you wish to install HTML\n     documentation with many files (such as the \"split\" mode output by\n     'makeinfo --html'), you'll certainly want to use subdirectories, or\n     two nodes with the same name in different manuals will overwrite\n     each other.\n     Please make these 'install-FORMAT' targets invoke the commands for\n     the FORMAT target, for example, by making FORMAT a dependency.", "install-ps": "'install-html'\n'install-dvi'\n'install-pdf'\n'install-ps'\n     These targets install documentation in formats other than Info;\n     they're intended to be called explicitly by the person installing\n     the package, if that format is desired.  GNU prefers Info files, so\n     these must be installed by the 'install' target.\n     When you have many documentation files to install, we recommend\n     that you avoid collisions and clutter by arranging for these\n     targets to install in subdirectories of the appropriate\n     installation directory, such as 'htmldir'.  As one example, if your\n     package has multiple manuals, and you wish to install HTML\n     documentation with many files (such as the \"split\" mode output by\n     'makeinfo --html'), you'll certainly want to use subdirectories, or\n     two nodes with the same name in different manuals will overwrite\n     each other.\n     Please make these 'install-FORMAT' targets invoke the commands for\n     the FORMAT target, for example, by making FORMAT a dependency.", "uninstall": "'uninstall'\n     Delete all the installed files--the copies that the 'install' and\n     'install-*' targets create.\n     This rule should not modify the directories where compilation is\n     done, only the directories where files are installed.\n     The uninstallation commands are divided into three categories, just\n     like the installation commands.  *Note Install Command\n     Categories::.", "install-strip": "'install-strip'\n     Like 'install', but strip the executable files while installing\n     them.  In simple cases, this target can use the 'install' target in\n     a simple way:\n          install-strip:\n                  $(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' \\\n                          install\n     But if the package installs scripts as well as real executables,\n     the 'install-strip' target can't just refer to the 'install'\n     target; it has to strip the executables but not the scripts.\n     'install-strip' should not strip the executables in the build\n     directory which are being copied for installation.  It should only\n     strip the copies that are installed.\n     Normally we do not recommend stripping an executable unless you are\n     sure the program has no bugs.  However, it can be reasonable to\n     install a stripped executable for actual execution while saving the\n     unstripped executable elsewhere in case there is a bug.", "maintainer-clean": "'maintainer-clean'\n     Delete almost everything that can be reconstructed with this\n     Makefile.  This typically includes everything deleted by\n     'distclean', plus more: C source files produced by Bison, tags\n     tables, Info files, and so on.\n     The reason we say \"almost everything\" is that running the command\n     'make maintainer-clean' should not delete 'configure' even if\n     'configure' can be remade using a rule in the Makefile.  More\n     generally, 'make maintainer-clean' should not delete anything that\n     needs to exist in order to run 'configure' and then begin to build\n     the program.  Also, there is no need to delete parent directories\n     that were created with 'mkdir -p', since they could have existed\n     anyway.  These are the only exceptions; 'maintainer-clean' should\n     delete everything else that can be rebuilt.\n     The 'maintainer-clean' target is intended to be used by a\n     maintainer of the package, not by ordinary users.  You may need\n     special tools to reconstruct some of the files that 'make\n     maintainer-clean' deletes.  Since these files are normally included\n     in the distribution, we don't take care to make them easy to\n     reconstruct.  If you find you need to unpack the full distribution\n     again, don't blame us.\n     To help make users aware of this, the commands for the special\n     'maintainer-clean' target should start with these two:\n          @echo 'This command is intended for maintainers to use; it'\n          @echo 'deletes files that may need special tools to rebuild.'", "info": "'info'\n     Generate any Info files needed.  The best way to write the rules is\n     as follows:\n          info: foo.info\n          foo.info: foo.texi chap1.texi chap2.texi\n                  $(MAKEINFO) $(srcdir)/foo.texi\n     You must define the variable 'MAKEINFO' in the Makefile.  It should\n     run the 'makeinfo' program, which is part of the Texinfo\n     distribution.\n     Normally a GNU distribution comes with Info files, and that means\n     the Info files are present in the source directory.  Therefore, the\n     Make rule for an info file should update it in the source\n     directory.  When users build the package, ordinarily Make will not\n     update the Info files because they will already be up to date.", "dvi": "'dvi'\n'html'\n'pdf'\n'ps'\n     Generate documentation files in the given format.  These targets\n     should always exist, but any or all can be a no-op if the given\n     output format cannot be generated.  These targets should not be\n     dependencies of the 'all' target; the user must manually invoke\n     them.\n     Here's an example rule for generating DVI files from Texinfo:\n          dvi: foo.dvi\n          foo.dvi: foo.texi chap1.texi chap2.texi\n                  $(TEXI2DVI) $(srcdir)/foo.texi\n     You must define the variable 'TEXI2DVI' in the Makefile.  It should\n     run the program 'texi2dvi', which is part of the Texinfo\n     distribution.  ('texi2dvi' uses TeX to do the real work of\n     formatting.  TeX is not distributed with Texinfo.)  Alternatively,\n     write only the dependencies, and allow GNU 'make' to provide the\n     command.\n     Here's another example, this one for generating HTML from Texinfo:\n          html: foo.html\n          foo.html: foo.texi chap1.texi chap2.texi\n                  $(TEXI2HTML) $(srcdir)/foo.texi\n     Again, you would define the variable 'TEXI2HTML' in the Makefile;\n     for example, it might run 'makeinfo --no-split --html' ('makeinfo'\n     is part of the Texinfo distribution).", "html": "'dvi'\n'html'\n'pdf'\n'ps'\n     Generate documentation files in the given format.  These targets\n     should always exist, but any or all can be a no-op if the given\n     output format cannot be generated.  These targets should not be\n     dependencies of the 'all' target; the user must manually invoke\n     them.\n     Here's an example rule for generating DVI files from Texinfo:\n          dvi: foo.dvi\n          foo.dvi: foo.texi chap1.texi chap2.texi\n                  $(TEXI2DVI) $(srcdir)/foo.texi\n     You must define the variable 'TEXI2DVI' in the Makefile.  It should\n     run the program 'texi2dvi', which is part of the Texinfo\n     distribution.  ('texi2dvi' uses TeX to do the real work of\n     formatting.  TeX is not distributed with Texinfo.)  Alternatively,\n     write only the dependencies, and allow GNU 'make' to provide the\n     command.\n     Here's another example, this one for generating HTML from Texinfo:\n          html: foo.html\n          foo.html: foo.texi chap1.texi chap2.texi\n                  $(TEXI2HTML) $(srcdir)/foo.texi\n     Again, you would define the variable 'TEXI2HTML' in the Makefile;\n     for example, it might run 'makeinfo --no-split --html' ('makeinfo'\n     is part of the Texinfo distribution).", "pdf": "'dvi'\n'html'\n'pdf'\n'ps'\n     Generate documentation files in the given format.  These targets\n     should always exist, but any or all can be a no-op if the given\n     output format cannot be generated.  These targets should not be\n     dependencies of the 'all' target; the user must manually invoke\n     them.\n     Here's an example rule for generating DVI files from Texinfo:\n          dvi: foo.dvi\n          foo.dvi: foo.texi chap1.texi chap2.texi\n                  $(TEXI2DVI) $(srcdir)/foo.texi\n     You must define the variable 'TEXI2DVI' in the Makefile.  It should\n     run the program 'texi2dvi', which is part of the Texinfo\n     distribution.  ('texi2dvi' uses TeX to do the real work of\n     formatting.  TeX is not distributed with Texinfo.)  Alternatively,\n     write only the dependencies, and allow GNU 'make' to provide the\n     command.\n     Here's another example, this one for generating HTML from Texinfo:\n          html: foo.html\n          foo.html: foo.texi chap1.texi chap2.texi\n                  $(TEXI2HTML) $(srcdir)/foo.texi\n     Again, you would define the variable 'TEXI2HTML' in the Makefile;\n     for example, it might run 'makeinfo --no-split --html' ('makeinfo'\n     is part of the Texinfo distribution).", "ps": "'dvi'\n'html'\n'pdf'\n'ps'\n     Generate documentation files in the given format.  These targets\n     should always exist, but any or all can be a no-op if the given\n     output format cannot be generated.  These targets should not be\n     dependencies of the 'all' target; the user must manually invoke\n     them.\n     Here's an example rule for generating DVI files from Texinfo:\n          dvi: foo.dvi\n          foo.dvi: foo.texi chap1.texi chap2.texi\n                  $(TEXI2DVI) $(srcdir)/foo.texi\n     You must define the variable 'TEXI2DVI' in the Makefile.  It should\n     run the program 'texi2dvi', which is part of the Texinfo\n     distribution.  ('texi2dvi' uses TeX to do the real work of\n     formatting.  TeX is not distributed with Texinfo.)  Alternatively,\n     write only the dependencies, and allow GNU 'make' to provide the\n     command.\n     Here's another example, this one for generating HTML from Texinfo:\n          html: foo.html\n          foo.html: foo.texi chap1.texi chap2.texi\n                  $(TEXI2HTML) $(srcdir)/foo.texi\n     Again, you would define the variable 'TEXI2HTML' in the Makefile;\n     for example, it might run 'makeinfo --no-split --html' ('makeinfo'\n     is part of the Texinfo distribution).", "installcheck": "'installcheck'\n     Perform installation tests (if any).  The user must build and\n     install the program before running the tests.  You should not\n     assume that '$(bindir)' is in the search path.", "installdirs": "'installdirs'\n     It's useful to add a target named 'installdirs' to create the\n     directories where files are installed, and their parent\n     directories.  There is a script called 'mkinstalldirs' which is\n     convenient for this; you can find it in the Gnulib package.  You\n     can use a rule like this:\n          # Make sure all installation directories (e.g. $(bindir))\n          # actually exist by making them if necessary.\n          installdirs: mkinstalldirs\n                  $(srcdir)/mkinstalldirs $(bindir) $(datadir) \\\n                                          $(libdir) $(infodir) \\\n                                          $(mandir)\n     or, if you wish to support 'DESTDIR' (strongly encouraged),\n          # Make sure all installation directories (e.g. $(bindir))\n          # actually exist by making them if necessary.\n          installdirs: mkinstalldirs\n                  $(srcdir)/mkinstalldirs \\\n                      $(DESTDIR)$(bindir) $(DESTDIR)$(datadir) \\\n                      $(DESTDIR)$(libdir) $(DESTDIR)$(infodir) \\\n                      $(DESTDIR)$(mandir)\n     This rule should not modify the directories where compilation is\n     done.  It should do nothing but create installation directories.", "define": "'define VARIABLE'\n'define VARIABLE ='\n'define VARIABLE :='\n'define VARIABLE ::='\n'define VARIABLE :::='\n'define VARIABLE +='\n'define VARIABLE ?='\n'endef'\n     Define multi-line variables.\n     *Note Multi-Line::.", "endef": "'define VARIABLE'\n'define VARIABLE ='\n'define VARIABLE :='\n'define VARIABLE ::='\n'define VARIABLE :::='\n'define VARIABLE +='\n'define VARIABLE ?='\n'endef'\n     Define multi-line variables.\n     *Note Multi-Line::.", "undefine": "'undefine VARIABLE'\n     Undefining variables.\n     *Note Undefine Directive::.", "ifdef": "'ifdef VARIABLE'\n'ifndef VARIABLE'\n'ifeq (A,B)'\n'ifeq \"A\" \"B\"'\n'ifeq 'A' 'B''\n'ifneq (A,B)'\n'ifneq \"A\" \"B\"'\n'ifneq 'A' 'B''\n'else'\n'endif'\n     Conditionally evaluate part of the makefile.\n     *Note Conditionals::.", "ifndef": "'ifdef VARIABLE'\n'ifndef VARIABLE'\n'ifeq (A,B)'\n'ifeq \"A\" \"B\"'\n'ifeq 'A' 'B''\n'ifneq (A,B)'\n'ifneq \"A\" \"B\"'\n'ifneq 'A' 'B''\n'else'\n'endif'\n     Conditionally evaluate part of the makefile.\n     *Note Conditionals::.", "ifeq": "'ifdef VARIABLE'\n'ifndef VARIABLE'\n'ifeq (A,B)'\n'ifeq \"A\" \"B\"'\n'ifeq 'A' 'B''\n'ifneq (A,B)'\n'ifneq \"A\" \"B\"'\n'ifneq 'A' 'B''\n'else'\n'endif'\n     Conditionally evaluate part of the makefile.\n     *Note Conditionals::.", "ifneq": "'ifdef VARIABLE'\n'ifndef VARIABLE'\n'ifeq (A,B)'\n'ifeq \"A\" \"B\"'\n'ifeq 'A' 'B''\n'ifneq (A,B)'\n'ifneq \"A\" \"B\"'\n'ifneq 'A' 'B''\n'else'\n'endif'\n     Conditionally evaluate part of the makefile.\n     *Note Conditionals::.", "else": "'ifdef VARIABLE'\n'ifndef VARIABLE'\n'ifeq (A,B)'\n'ifeq \"A\" \"B\"'\n'ifeq 'A' 'B''\n'ifneq (A,B)'\n'ifneq \"A\" \"B\"'\n'ifneq 'A' 'B''\n'else'\n'endif'\n     Conditionally evaluate part of the makefile.\n     *Note Conditionals::.", "endif": "'ifdef VARIABLE'\n'ifndef VARIABLE'\n'ifeq (A,B)'\n'ifeq \"A\" \"B\"'\n'ifeq 'A' 'B''\n'ifneq (A,B)'\n'ifneq \"A\" \"B\"'\n'ifneq 'A' 'B''\n'else'\n'endif'\n     Conditionally evaluate part of the makefile.\n     *Note Conditionals::.", "include": "'include FILE'", "sinclude": "'sinclude FILE'\n     Include another makefile.\n     *Note Including Other Makefiles: Include.", "override": "'override VARIABLE-ASSIGNMENT'\n     Define a variable, overriding any previous definition, even one\n     from the command line.\n     *Note The 'override' Directive: Override Directive.", "export": "'export VARIABLE'\n'export VARIABLE-ASSIGNMENT'\n'unexport VARIABLE'\n     Tell 'make' whether or not to export a particular variable to child\n     processes.\n     *Note Communicating Variables to a Sub-'make': Variables/Recursion.", "unexport": "'export VARIABLE'\n'export VARIABLE-ASSIGNMENT'\n'unexport VARIABLE'\n     Tell 'make' whether or not to export a particular variable to child\n     processes.\n     *Note Communicating Variables to a Sub-'make': Variables/Recursion.", "private": "'private VARIABLE-ASSIGNMENT'\n     Do not allow this variable assignment to be inherited by\n     prerequisites.\n     *Note Suppressing Inheritance::.", "vpath": "'vpath'\n     Remove all search paths previously specified in any 'vpath'\n     directive.", "subst": "'$(subst FROM,TO,TEXT)'\n     Replace FROM with TO in TEXT.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "patsubst": "'$(patsubst PATTERN,REPLACEMENT,TEXT)'\n     Replace words matching PATTERN with REPLACEMENT in TEXT.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "strip": "'$(strip STRING)'\n     Remove excess whitespace characters from STRING.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "findstring": "'$(findstring FIND,TEXT)'\n     Locate FIND in TEXT.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "filter": "'$(filter PATTERN...,TEXT)'\n     Select words in TEXT that match one of the PATTERN words.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "filter-out": "'$(filter-out PATTERN...,TEXT)'\n     Select words in TEXT that _do not_ match any of the PATTERN words.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "sort": "'$(sort LIST)'\n     Sort the words in LIST lexicographically, removing duplicates.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "word": "'$(word N,TEXT)'\n     Extract the Nth word (one-origin) of TEXT.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "words": "'$(words TEXT)'\n     Count the number of words in TEXT.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "wordlist": "'$(wordlist S,E,TEXT)'\n     Returns the list of words in TEXT from S to E.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "firstword": "'$(firstword NAMES...)'\n     Extract the first word of NAMES.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "lastword": "'$(lastword NAMES...)'\n     Extract the last word of NAMES.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "dir": "'$(dir NAMES...)'\n     Extract the directory part of each file name.\n     *Note Functions for File Names: File Name Functions.", "notdir": "'$(notdir NAMES...)'\n     Extract the non-directory part of each file name.\n     *Note Functions for File Names: File Name Functions.", "suffix": "'$(suffix NAMES...)'\n     Extract the suffix (the last '.' and following characters) of each\n     file name.\n     *Note Functions for File Names: File Name Functions.", "basename": "'$(basename NAMES...)'\n     Extract the base name (name without suffix) of each file name.\n     *Note Functions for File Names: File Name Functions.", "addsuffix": "'$(addsuffix SUFFIX,NAMES...)'\n     Append SUFFIX to each word in NAMES.\n     *Note Functions for File Names: File Name Functions.", "addprefix": "'$(addprefix PREFIX,NAMES...)'\n     Prepend PREFIX to each word in NAMES.\n     *Note Functions for File Names: File Name Functions.", "join": "'$(join LIST1,LIST2)'\n     Join two parallel lists of words.\n     *Note Functions for File Names: File Name Functions.", "wildcard": "'$(wildcard PATTERN...)'\n     Find file names matching a shell file name pattern (_not_ a '%'\n     pattern).\n     *Note The Function 'wildcard': Wildcard Function.", "realpath": "'$(realpath NAMES...)'\n     For each file name in NAMES, expand to an absolute name that does\n     not contain any '.', '..', nor symlinks.\n     *Note Functions for File Names: File Name Functions.", "abspath": "'$(abspath NAMES...)'\n     For each file name in NAMES, expand to an absolute name that does\n     not contain any '.' or '..' components, but preserves symlinks.\n     *Note Functions for File Names: File Name Functions.", "error": "'$(error TEXT...)'\n     When this function is evaluated, 'make' generates a fatal error\n     with the message TEXT.\n     *Note Functions That Control Make: Make Control Functions.", "warning": "'$(warning TEXT...)'\n     When this function is evaluated, 'make' generates a warning with\n     the message TEXT.\n     *Note Functions That Control Make: Make Control Functions.", "shell": "'$(shell COMMAND)'\n     Execute a shell command and return its output.\n     *Note The 'shell' Function: Shell Function.", "origin": "'$(origin VARIABLE)'\n     Return a string describing how the 'make' variable VARIABLE was\n     defined.\n     *Note The 'origin' Function: Origin Function.", "flavor": "'$(flavor VARIABLE)'\n     Return a string describing the flavor of the 'make' variable\n     VARIABLE.\n     *Note The 'flavor' Function: Flavor Function.", "let": "'$(let VAR [VAR ...],WORDS,TEXT)'\n     Evaluate TEXT with the VARs bound to the words in WORDS.\n     *Note The 'let' Function: Let Function.", "foreach": "'$(foreach VAR,WORDS,TEXT)'\n     Evaluate TEXT with VAR bound to each word in WORDS, and concatenate\n     the results.\n     *Note The 'foreach' Function: Foreach Function.", "if": "'$(if CONDITION,THEN-PART[,ELSE-PART])'\n     Evaluate the condition CONDITION; if it's non-empty substitute the\n     expansion of the THEN-PART otherwise substitute the expansion of\n     the ELSE-PART.\n     *Note Functions for Conditionals: Conditional Functions.", "or": "'$(or CONDITION1[,CONDITION2[,CONDITION3...]])'\n     Evaluate each condition CONDITIONN one at a time; substitute the\n     first non-empty expansion.  If all expansions are empty, substitute\n     the empty string.\n     *Note Functions for Conditionals: Conditional Functions.", "and": "'$(and CONDITION1[,CONDITION2[,CONDITION3...]])'\n     Evaluate each condition CONDITIONN one at a time; if any expansion\n     results in the empty string substitute the empty string.  If all\n     expansions result in a non-empty string, substitute the expansion\n     of the last CONDITION.\n     *Note Functions for Conditionals: Conditional Functions.", "intcmp": "'$(intcmp LHS,RHS[,LT-PART[,EQ-PART[,GT-PART]]])'\n     Compare LHS and RHS numerically; substitute the expansion of\n     LT-PART, EQ-PART, or GT-PART depending on whether the left-hand\n     side is less-than, equal-to, or greater-than the right-hand side,\n     respectively.\n     *Note Functions for Conditionals: Conditional Functions.", "call": "'$(call VAR,PARAM,...)'\n     Evaluate the variable VAR replacing any references to '$(1)',\n     '$(2)' with the first, second, etc. PARAM values.\n     *Note The 'call' Function: Call Function.", "eval": "'$(eval TEXT)'\n     Evaluate TEXT then read the results as makefile commands.  Expands\n     to the empty string.\n     *Note The 'eval' Function: Eval Function.", "file": "'$(file OP FILENAME,TEXT)'\n     Expand the arguments, then open the file FILENAME using mode OP and\n     write TEXT to that file.\n     *Note The 'file' Function: File Function.", "value": "'$(value VAR)'\n     Evaluates to the contents of the variable VAR, with no expansion\n     performed on it.\n     *Note The 'value' Function: Value Function.", "MAKEFILES": "'MAKEFILES'\n     Makefiles to be read on every invocation of 'make'.\n     *Note The Variable 'MAKEFILES': MAKEFILES Variable.", "VPATH": "'VPATH'\n     Directory search path for files not found in the current directory.\n     *Note 'VPATH' Search Path for All Prerequisites: General Search.", "SHELL": "'SHELL'\n     The name of the system default command interpreter, usually\n     '/bin/sh'.  You can set 'SHELL' in the makefile to change the shell\n     used to run recipes.  *Note Recipe Execution: Execution.  The\n     'SHELL' variable is handled specially when importing from and\n     exporting to the environment.  *Note Choosing the Shell::.", "MAKESHELL": "'MAKESHELL'\n     On MS-DOS only, the name of the command interpreter that is to be\n     used by 'make'.  This value takes precedence over the value of\n     'SHELL'.  *Note MAKESHELL variable: Execution.", "MAKE": "'MAKE'\n     The name with which 'make' was invoked.  Using this variable in\n     recipes has special meaning.  *Note How the 'MAKE' Variable Works:\n     MAKE Variable.", "MAKE_VERSION": "'MAKE_VERSION'\n     The built-in variable 'MAKE_VERSION' expands to the version number\n     of the GNU 'make' program.", "MAKE_HOST": "'MAKE_HOST'\n     The built-in variable 'MAKE_HOST' expands to a string representing\n     the host that GNU 'make' was built to run on.", "MAKELEVEL": "'MAKELEVEL'\n     The number of levels of recursion (sub-'make's).\n     *Note Variables/Recursion::.", "MAKEFLAGS": "'MAKEFLAGS'\n     The flags given to 'make'.  You can set this in the environment or\n     a makefile to set flags.\n     *Note Communicating Options to a Sub-'make': Options/Recursion.\n     It is _never_ appropriate to use 'MAKEFLAGS' directly in a recipe\n     line: its contents may not be quoted correctly for use in the\n     shell.  Always allow recursive 'make''s to obtain these values\n     through the environment from its parent.", "GNUMAKEFLAGS": "'GNUMAKEFLAGS'\n     Other flags parsed by 'make'.  You can set this in the environment\n     or a makefile to set 'make' command-line flags.  GNU 'make' never\n     sets this variable itself.  This variable is only needed if you'd\n     like to set GNU 'make'-specific flags in a POSIX-compliant\n     makefile.  This variable will be seen by GNU 'make' and ignored by\n     other 'make' implementations.  It's not needed if you only use GNU\n     'make'; just use 'MAKEFLAGS' directly.  *Note Communicating Options\n     to a Sub-'make': Options/Recursion.", "MAKECMDGOALS": "'MAKECMDGOALS'\n     The targets given to 'make' on the command line.  Setting this\n     variable has no effect on the operation of 'make'.\n     *Note Arguments to Specify the Goals: Goals.", "CURDIR": "'CURDIR'\n     Set to the absolute pathname of the current working directory\n     (after all '-C' options are processed, if any).  Setting this\n     variable has no effect on the operation of 'make'.\n     *Note Recursive Use of 'make': Recursion.", "SUFFIXES": "'SUFFIXES'\n     The default list of suffixes before 'make' reads any makefiles.", ".LIBPATTERNS": "'.LIBPATTERNS'\n     Defines the naming of the libraries 'make' searches for, and their\n     order.\n     *Note Directory Search for Link Libraries: Libraries/Search.", "[FOO]": "'[FOO] Error NN'\n'[FOO] SIGNAL DESCRIPTION'\n     These errors are not really 'make' errors at all.  They mean that a\n     program that 'make' invoked as part of a recipe returned a non-0\n     error code ('Error NN'), which 'make' interprets as failure, or it\n     exited in some other abnormal fashion (with a signal of some type).\n     *Note Errors in Recipes: Errors.\n     If no '***' is attached to the message, then the sub-process failed\n     but the rule in the makefile was prefixed with the '-' special\n     character, so 'make' ignored the error.", "missing": "'missing target pattern. Stop.'\n'multiple target patterns. Stop.'\n'target pattern contains no `%'. Stop.'\n'mixed implicit and static pattern rules. Stop.'\n     These errors are generated for malformed static pattern rules\n     (*note Syntax of Static Pattern Rules: Static Usage.).  The first\n     means the target-pattern part of the rule is empty; the second\n     means there are multiple pattern characters ('%') in the\n     target-pattern part; the third means there are no pattern\n     characters in the target-pattern part; and the fourth means that\n     all three parts of the static pattern rule contain pattern\n     characters ('%')-the first part should not contain pattern\n     characters.\n     If you see these errors and you aren't trying to create a static\n     pattern rule, check the value of any variables in your target and\n     prerequisite lists to be sure they do not contain colons.", "recipe": "'recipe commences before first target. Stop.'\n'missing rule before recipe. Stop.'\n     This means the first thing in the makefile seems to be part of a\n     recipe: it begins with a recipe prefix character and doesn't appear\n     to be a legal 'make' directive (such as a variable assignment).\n     Recipes must always be associated with a target.\n     The second form is generated if the line has a semicolon as the\n     first non-whitespace character; 'make' interprets this to mean you\n     left out the \"target: prerequisite\" section of a rule.  *Note Rule\n     Syntax::.", "No": "'No targets specified and no makefile found. Stop.'\n'No targets. Stop.'\n     The former means that you didn't provide any targets to be built on\n     the command line, and 'make' couldn't find any makefiles to read\n     in.  The latter means that some makefile was found, but it didn't\n     contain any default goal and none was given on the command line.\n     GNU 'make' has nothing to do in these situations.  *Note Arguments\n     to Specify the Makefile: Makefile Arguments.", "Makefile": "'Makefile `XXX' was not found.'\n'Included makefile `XXX' was not found.'\n     A makefile specified on the command line (first form) or included\n     (second form) was not found.", "Included": "'Makefile `XXX' was not found.'\n'Included makefile `XXX' was not found.'\n     A makefile specified on the command line (first form) or included\n     (second form) was not found.", "warning:": "'warning: ignoring prerequisites on suffix rule definition'\n     According to POSIX, a suffix rule cannot contain prerequisites.  If\n     a rule that could be a suffix rule has prerequisites it is\n     interpreted as a simple explicit rule, with an odd target name.\n     This requirement is obeyed when POSIX-conforming mode is enabled\n     (the '.POSIX' target is defined).  In versions of GNU 'make' prior\n     to 4.3, no warning was emitted and a suffix rule was created,\n     however all prerequisites were ignored and were not part of the\n     suffix rule.  Starting with GNU 'make' 4.3 the behavior is the\n     same, and in addition this warning is generated.  In a future\n     version the POSIX-conforming behavior will be the only behavior: no\n     rule with a prerequisite can be suffix rule and this warning will\n     be removed.", "Circular": "'Circular XXX <- YYY dependency dropped.'\n     This means that 'make' detected a loop in the dependency graph:\n     after tracing the prerequisite YYY of target XXX, and its\n     prerequisites, etc., one of them depended on XXX again.", "Recursive": "'Recursive variable `XXX' references itself (eventually). Stop.'\n     This means you've defined a normal (recursive) 'make' variable XXX\n     that, when it's expanded, will refer to itself (XXX).  This is not\n     allowed; either use simply-expanded variables (':=' or '::=') or\n     use the append operator ('+=').  *Note How to Use Variables: Using\n     Variables.", "Unterminated": "'Unterminated variable reference. Stop.'\n     This means you forgot to provide the proper closing parenthesis or\n     brace in your variable or function reference.", "insufficient": "'insufficient arguments to function `XXX'. Stop.'\n     This means you haven't provided the requisite number of arguments\n     for this function.  See the documentation of the function for a\n     description of its arguments.  *Note Functions for Transforming\n     Text: Functions.", "multiple": "'missing target pattern. Stop.'\n'multiple target patterns. Stop.'\n'target pattern contains no `%'. Stop.'\n'mixed implicit and static pattern rules. Stop.'\n     These errors are generated for malformed static pattern rules\n     (*note Syntax of Static Pattern Rules: Static Usage.).  The first\n     means the target-pattern part of the rule is empty; the second\n     means there are multiple pattern characters ('%') in the\n     target-pattern part; the third means there are no pattern\n     characters in the target-pattern part; and the fourth means that\n     all three parts of the static pattern rule contain pattern\n     characters ('%')-the first part should not contain pattern\n     characters.\n     If you see these errors and you aren't trying to create a static\n     pattern rule, check the value of any variables in your target and\n     prerequisite lists to be sure they do not contain colons.", "target": "'missing target pattern. Stop.'\n'multiple target patterns. Stop.'\n'target pattern contains no `%'. Stop.'\n'mixed implicit and static pattern rules. Stop.'\n     These errors are generated for malformed static pattern rules\n     (*note Syntax of Static Pattern Rules: Static Usage.).  The first\n     means the target-pattern part of the rule is empty; the second\n     means there are multiple pattern characters ('%') in the\n     target-pattern part; the third means there are no pattern\n     characters in the target-pattern part; and the fourth means that\n     all three parts of the static pattern rule contain pattern\n     characters ('%')-the first part should not contain pattern\n     characters.\n     If you see these errors and you aren't trying to create a static\n     pattern rule, check the value of any variables in your target and\n     prerequisite lists to be sure they do not contain colons.", "mixed": "'missing target pattern. Stop.'\n'multiple target patterns. Stop.'\n'target pattern contains no `%'. Stop.'\n'mixed implicit and static pattern rules. Stop.'\n     These errors are generated for malformed static pattern rules\n     (*note Syntax of Static Pattern Rules: Static Usage.).  The first\n     means the target-pattern part of the rule is empty; the second\n     means there are multiple pattern characters ('%') in the\n     target-pattern part; the third means there are no pattern\n     characters in the target-pattern part; and the fourth means that\n     all three parts of the static pattern rule contain pattern\n     characters ('%')-the first part should not contain pattern\n     characters.\n     If you see these errors and you aren't trying to create a static\n     pattern rule, check the value of any variables in your target and\n     prerequisite lists to be sure they do not contain colons."}